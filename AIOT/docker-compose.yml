# docker-compose.yml 用於定義和管理多個 Docker 容器服務的配置。
# 使用 'docker compose up' 可以根據此文件啟動所有定義的服務。

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# services is all container I want to build in this group
services: # 定義所有要運行的服務（容器）
  # 前端服務 - React 應用
  aiot-frontend:
    logging: *default-logging # 使用預設的日誌配置
    build:
      # the context property is specifies the folder I want to use, like the command COPY and ADD in dockerfile are based on this context folder
      context: ../../AIOT/fe
      dockerfile: ./Dockerfile.fe # 指定 Dockerfile 路徑
    container_name: AIOT-fe # 指定容器名稱
    ports:
      - "3000:3000" # 將主機的 3000 端口映射到容器的 3000 端口
    # environment means the environment variables
    environment:
      # the option of NODE_ENV has production and development,
      # the production one would optimize and cancel the debug log
      # and the development one would keep the debug log and enable the hot reload
      - NODE_ENV=development # 設定環境變數為開發環境

    # since the docker compose, the fe container would auto recognize the be container's name, like aiot-backend
    # so in the react project, I just need to set the url like http://aiot-backend:8000/api

    # 手動控制服務啟動 - 註解掉此行可恢復自動啟動
    command: ["tail", "-f", "/dev/null"]
    
    # depend_on is the property that specifies the which container should be started before this container
    depends_on:
      - aiot-backend
    networks:
      - aiot-compose-network # 指定使用的網路
    volumes:
      - ../../AIOT:/app # 將本地 AIOT 整個資料夾掛載到容器 /app
      - /app/fe/node_modules # 保持 node_modules 不被本地覆蓋
    restart: unless-stopped # 當容器異常停止時自動重啟

  # 後端服務 - Express.js API
  aiot-backend:
    logging: *default-logging # 使用預設的日誌配置
    build:
      context: ../../AIOT/be # 指定 Dockerfile 構建上下文目錄
      dockerfile: ./Dockerfile.be # 指定 Dockerfile 路徑

    container_name: AIOT-be # 指定容器名稱
    ports:
      - "8000:8000" # 將主機的 8000 端口映射到容器的 8000 端口
    environment:
      - NODE_ENV=development # 設定環境變數為開發環境
      - DATABASE_URL=mysql://admin:admin@aiot-mysqldb:3306/main_db # MySQL 資料庫連線字串
      - MONGODB_URL=mongodb://admin:admin@aiot-mongodb:27017/main_db?authSource=admin # MongoDB 連線字串
      - REDIS_URL=redis://aiot-redis:6379/0
      - RABBITMQ_URL=amqp://admin:admin@aiot-rabbitmq:5672/
      - OLLAMA_URL=http://host.docker.internal:11434  # 指向 Windows 原生 Ollama
    
    # 手動控制服務啟動 - 註解掉此行可恢復自動啟動
    # 因為所使用的image, 本身就會auto run server port, 但是我想要手動控制server port 開關，所以需要加上這一行來讓 container not to auto run server port
    command: ["tail", "-f", "/dev/null"]
    
    depends_on:
      aiot-mysqldb: # 啟動後端前需先啟動 MySQL
        condition: service_healthy # 確保 MySQL 健康檢查通過
      aiot-mongodb: # 啟動後端前需先啟動 MongoDB
        condition: service_healthy # 確保 MongoDB 健康檢查通過
      aiot-redis: # 啟動後端前需先啟動 Redis
        condition: service_started # 確保 Redis 已啟動
      aiot-rabbitmq: # 啟動後端前需先啟動 RabbitMQ
        condition: service_started # 確保 RabbitMQ 已啟動
    networks:
      - aiot-compose-network
    volumes:
      - ../../AIOT:/app # 將本地 AIOT 整個資料夾掛載到容器 /app
      - /app/be/node_modules # 保持 node_modules 不被本地覆蓋
    restart: unless-stopped # 當容器異常停止時自動重啟

  # SQL 資料庫服務 - MySQL
  aiot-mysqldb:
    logging: *default-logging # 使用預設的日誌配置
    image: mysql:latest # using the latest official mysql image
    container_name: AIOT-mysqldb # 指定容器名稱
    ports:
      - "3306:3306" # 將主機的 3306 端口映射到容器的 3306 端口
    environment:
      - MYSQL_USER=admin # 新增的使用者名稱
      - MYSQL_ROOT_PASSWORD=admin # MySQL root 使用者密碼
      - MYSQL_DATABASE=main_db # 預設建立的資料庫名稱
      - MYSQL_PASSWORD=admin # 新增使用者的密碼
      - TZ=Asia/Taipei # 設定時區為台北
    volumes:
      - mysql_data:/var/lib/mysql # 使用 volume 儲存 MySQL 資料
    networks:
      - aiot-compose-network # 指定使用的網路
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "admin",
          "-padmin",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped # 異常停止時自動重啟

  # NoSQL 資料庫服務 - MongoDB
  aiot-mongodb:
    logging: *default-logging # 使用預設的日誌配置
    image: mongo:latest # using the latest official mongo image
    container_name: AIOT-mongodb # 指定容器名稱
    ports:
      - "27017:27017" # 將主機的 27017 端口映射到容器的 27017 端口
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin # MongoDB root 使用者名稱
      - MONGO_INITDB_ROOT_PASSWORD=admin # root 使用者密碼
      - MONGO_INITDB_DATABASE=main_db # 預設建立的資料庫名稱
    volumes:
      - mongodb_data:/data/db # 使用 volume 儲存 MongoDB 資料
    networks:
      - aiot-compose-network # 指定使用的網路
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "-u",
          "admin",
          "-p",
          "admin",
          "--authenticationDatabase",
          "admin",
          "--eval",
          "db.adminCommand('ping')",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped # 異常停止時自動重啟

  # Redis 快取服務 server
  aiot-redis:
    logging: *default-logging
    image: redis:latest
    container_name: AIOT-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aiot-compose-network
    restart: unless-stopped

  # RabbitMQ 消息隊列服務
  aiot-rabbitmq:
    logging: *default-logging
    image: rabbitmq:3-management
    container_name: AIOT-rabbitmq
    ports:
      - "5672:5672" # AMQP protocol
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./config/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - aiot-compose-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # LLM 服務 - Django
  aiot-llm:
    logging: *default-logging
    build:
      context: ../../AIOT/llm
      dockerfile: ./Dockerfile.llm
    container_name: AIOT-llm
    ports:
      - "8020:8020" # Django 端口
    environment:
      - DJANGO_SETTINGS_MODULE=llm.settings
      - DEBUG=True
      - DATABASE_URL=sqlite:///db.sqlite3
      - OLLAMA_URL=http://host.docker.internal:11434 # 連接到主機上的 Ollama
    volumes:
      - ../../AIOT/llm:/app
    networks:
      - aiot-compose-network
    # 手動控制服務啟動
    command: ["tail", "-f", "/dev/null"]
    restart: unless-stopped

  

# 定義持久化資料的 volumes
volumes:
  mysql_data:
    # the local in this property means store the data with volume format in local device but no        t with format of mysqldata or mongodbdata
    # so I do not need to set the relative config of mysql or mongodb in the local device, because I build these containers to handle these
    # the docker will make these containers to access the volume which stored in the local device to be the db data
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

# the networks section is how the containers communicate with each other in this same group, and which need to be defined by myself
networks:
  # here is the tailored name designed by myself for the network
  aiot-compose-network:
    # in this context, the driver means the type of network, not the general meaning of driver as I know
    # for local device development, using the bridge network is the appropriate choice
    # another choice is host, but which is used for share the device's network stack
    driver: bridge # 使用 bridge 網路模式

# appendix:
#  the volume is a mechanism, not a type of container; and which store the data or any file outside the container permanently
